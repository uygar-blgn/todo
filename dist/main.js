(()=>{"use strict";class e{constructor(e="",t=[]){this.name=e,this.todos=t}}const t=new class{constructor(e="",t="",n="Low Priority",c="01/01/1970",s=!1){this.name=e,this.desc=t,this.priority=n,this.complete=s,this.due=c}}("task1","yes","High Priority","01/07/2004",!1),n=new e("",[t]),c=new e("a",[t]),s=new e("b",[t]);new class{constructor(e=[]){this.projects=e,this.renderSidebar(),this.renderContent()}renderSidebar(){const t=document.querySelector("#sidebar");t.textContent="",this.projects.forEach((e=>{if(""!=e.name){const n=document.createElement("div");n.className="project",n.textContent=e.name,t.appendChild(n)}}));const n=document.createElement("div");n.id="new-project";const c=document.createElement("img");c.src="https://www.svgrepo.com/show/2087/plus.svg",n.appendChild(c),n.addEventListener("click",(()=>{const c=prompt("Name of new project?"),s=new e(c,[]);this.projects.push(s);const o=document.createElement("div");o.className="project",o.textContent=s.name,t.removeChild(n),t.appendChild(o),t.appendChild(n),this.renderContent()})),t.appendChild(n)}renderContent(){const e=document.querySelector("#content");e.textContent="",this.projects.forEach((t=>{const n=document.createElement("div");if(n.className="project-category",""!=t.name){const e=document.createElement("div");e.className="project-title",e.textContent=t.name,n.appendChild(e)}t.todos.forEach((e=>{const t=document.createElement("div");t.className="task";const c=document.createElement("div");c.className="task-name";const s=document.createElement("div");s.className="task-desc";const o=document.createElement("div");o.className="task-priority";const a=document.createElement("div");a.className="task-due";const d=document.createElement("div");d.className="task-complete";const r=document.createElement("div");r.className="task-delete",c.textContent=e.name,s.textContent=e.desc,o.textContent=e.priority,a.textContent=e.due,t.appendChild(c),t.appendChild(s),t.appendChild(o),t.appendChild(a),t.appendChild(d),t.appendChild(r),n.appendChild(t)})),e.appendChild(n)}))}}([n,c,s])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,